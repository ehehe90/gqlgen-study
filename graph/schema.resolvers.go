package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	// "fmt"

	"github.com/ehehe90/gqlgen-study/graph/model"
	"github.com/ehehe90/gqlgen-study/util"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := &model.Todo{
		ID: util.CreateUniqueID(),
		Text: input.Text,
		Done: false,
		UserID: input.UserID,
	}
	res := r.DB.Create(&todo)
	if err := res.Error; err != nil {
		return nil, err
	}
	return todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user := &model.User{
		ID: util.CreateUniqueID(),
		Name: input.Name,
	}
	res := r.DB.Create(&user)
	if err := res.Error; err != nil {
		return nil, err
	}
	return user, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	var todos []*model.Todo
    res := r.DB.Find(&todos)
    if err := res.Error; err != nil {
        return nil, err
    }
    return todos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	todo := &model.Todo{ID: id}
    res := r.DB.First(&todo)
    if err := res.Error; err != nil {
        return nil, err
    }
    return todo, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
    res := r.DB.Find(&users)
    if err := res.Error; err != nil {
        return nil, err
    }
    return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user := &model.User{ID: id}
    res := r.DB.First(user)
    if err := res.Error; err != nil {
        return nil, err
    }
    return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
